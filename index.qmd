---
title: "Observatoire Français de l'Euro 2024"
---

Bienvenue sur le site de l'Observatoire Français de l'Euro 2024, où les experts de l'OFCE tentent d'exposer leurs talents de prévisionnistes footballistisques.

```{r setup, include=FALSE}
# Les options qui se trouvent là sont fortement conseillées
library(knitr)
library(tidyverse)
library(showtext) 
library(ofce)
library(gt)
library(openxlsx)
library(glue)
opts_chunk$set(
    
  echo = FALSE,
  warning = FALSE,
  message = FALSE,
  fig.pos="H", 
  # eval = FALSE,
  out.extra="",
  out.width = "67%",
  # dev="ragg_png",
  cap.location= "bottom",
  
  fig.showtext=TRUE,
  cache=FALSE)

showtext_opts(dpi=600)
showtext_auto()
```
Voici donc le classement en temps réel :

```{r obsolete}
# classement<- table[!sapply(table, \(x) any(is.na(x)))] |> 
#   select(-1) |> 
#   rename("Nom" = 1) |> 
#   mutate( medalrank = rank(desc(Total), ties.method = "min"))# |> 
#   mutate( medalrank = rank(desc(Total), ties.method = "min"),
#           Nom = case_when(Total == max(Total) ~ medal(Nom, medalrank) ,
#                          TRUE ~ Nom))
#                          
# # colnames(classement) <- gsub("tour\\d*", "Tour ", colnames(classement))
# # classement
# 
# 
# test |> 
#   gt()
#   

# 
# medal <- function(df){
#   
#  if (df[["medalrank"]] ==1) {
#    paste(df[["Nom"]], "\U1F947")
#  }
# }
#   
# #   
# #     else if (medalrank ==2){
# #    paste(x, "\U1F948")
# #  }
# #   else if (medalrank ==3){
# #     paste(x, "\U1F949")
# #   }
# # }
# 
# medal(classement$Nom, classement$medalrank)
# 
# 
# if (classement$medalrank ==1){
#   paste(classement$Nom,"\U1F947")
# }
```


```{r imports-pronos}

table <- openxlsx::read.xlsx("Euro2024.xlsx", sheet = "RANK") |> 
  slice(1:13)

classement<- table[!sapply(table, \(x) any(is.na(x)))] |>
  select(-1) |>
  rename("Nom" = 1)

ranktable <- classement |> 
  mutate(medalrank = rank(desc(Total), ties.method = "min"),
         Nom = case_when(medalrank ==1 ~ paste(Nom, "\U1F947"),
                         medalrank ==2 ~ paste(Nom, "\U1F948"),
                         medalrank == 3 ~ paste(Nom, "\U1F949"), 
                         TRUE~Nom)) |> 
  select(-medalrank)



ranktable |> 
  gt() |> 
  tab_style(cell_text(weight = "bold"), locations = cells_body(columns = Nom, rows = rank(desc(Total), ties.method = "min") < 4)) |> 
  cols_label_with(fn= \(x) str_replace(x,"tour", "Tour ")) |> 
  tab_spanner(label = "Phase de poules", columns = starts_with("Tour")) |> 
  tab_source_note(source_note = md(paste0("*Dernière mise à jour: ", ymd_hm(format(Sys.time(), '%Y-%m-%d %H:%M')), "*"))) |> 
  
  opt_interactive(
    use_sorting = TRUE,
    page_size_default = 13,
    page_size_values = c(13,26,52,104)
  ) |> 
  tab_style(
    style = list(
      cell_fill(color = "gold2")
    ),
    locations = cells_body(
      columns = targets$columns_target,
      rows = targets$rows_target
     )
    )

   
```


```{r}


# columnst <- names(ranktable |> select(where(is.numeric)))
# rowst <- map(ranktable|> select(where(is.numeric)), \(x) which(x == max(x))) |> unlist()
# targets <- ranktable |> select(where(is.numeric)) |> mutate(rownumber=  seq_len(nrow(ranktable)))# |> map(\(x) x[x==max(x)]) |> list_rbind()
# 
# testgt <- ranktable |> 
#   gt() |> 
#   tab_style(cell_text(weight = "bold"), locations = cells_body(columns = Nom, rows = rank(desc(Total), ties.method = "min") < 4)) |> 
#   cols_label_with(fn= \(x) str_replace(x,"tour", "Tour ")) |> 
#   tab_spanner(label = "Phase de poules", columns = starts_with("Tour")) |> 
#   tab_source_note(source_note = md(paste0("*Dernière mise à jour: ", ymd_hm(format(Sys.time(), '%Y-%m-%d %H:%M')), "*"))) |> 
#   
#   opt_interactive(
#     use_sorting = TRUE,
#     page_size_default = 13,
#     page_size_values = c(13,26,52,104)
#   ) |> 
#   tab_style(
#     style = list(
#       cell_fill(color = "gold2")
#     ),
#     locations = cells_body(
#       columns = columnst,
#       rows = rowst
#      )
#     )
# 
# 
# targets <- ranktable |> map(.f = function(.x) {data.frame(columns_target = imap(.x, ~ .y),
#       rows_target = which(.x == max(.x))) 
#       }
#       ) |> 
#   list_rbind()
# 
# test_gt <- ranktable |> 
#   gt() |> 
#   tab_style(cell_text(weight = "bold"), locations = cells_body(columns = Nom, rows = rank(desc(Total), ties.method = "min") < 4)) |> 
#   cols_label_with(fn= \(x) str_replace(x,"tour", "Tour ")) |> 
#   tab_spanner(label = "Phase de poules", columns = starts_with("Tour")) |> 
#   tab_source_note(source_note = md(paste0("*Dernière mise à jour: ", ymd_hm(format(Sys.time(), '%Y-%m-%d %H:%M')), "*"))) |> 
#   
#   opt_interactive(
#     use_sorting = TRUE,
#     page_size_default = 13,
#     page_size_values = c(13,26,52,104)
#   ) |> 
#   Reduce(function(x) x |> tab_style_body(style = list(cell_fill(color ="gold2"))), lo ,
#          )
# 
# target_condselect <- function(targetdf){
#   cells_body()
# }
# 
# 
# 
#  # |> tab_style_body(
#  #    columns = where(is.numeric),
#  #    style = cell_fill(color = "gold2"),
#  #    fn = function(x) x == max(x)
#  #  )
# 
#   
#   ranktable |> select((is.numeric)) |> 
#       map(.f = function(.x) {cells_body(columns = .x,
#                                          rows = which(.x == max(.x)))})
#   testf <- function(ranktable){
#    ranktable  |> 
#       map(.f = function(.x) {data.frame(columns_target = is.numeric(.x),
#       rows_target = which(.x == max(.x))) #|> list_rbind()
#       }
#       )
#   }
#   
#   debugonce(testf)
# testf(ranktable)
# 
#  test <- ranktable  |> 
#       map(.f = function(.x) {data.frame(columns_target = is.numeric(.x),
#       rows_target = which(.x == max(.x))) 
#       }
#       )|>
#    list_rbind()
#    cells_body(columns = test[["columns_target"]], rows = [["rows_target"]])
   

```


